<?xml version="1.0"?>
<project name="ddieditor" default="compile" basedir=".">

	<!-- properties -->
	<property file="${basedir}/build.properties" />
	<property file="${basedir}/../lib-java/lib.properties" />
	<property environment="env" />

	<!-- directories -->
	<property name="src.dir" value="${basedir}/source" />
	<property name="src.resources.dir" value="${src.dir}/resources" />
	<property name="testsrc.dir" value="${basedir}/testsource" />
	<property name="lib.dir" value="${basedir}/../lib-java/" />
	<property name="build.classes.dir" value="${basedir}/build" />
	<property name="build.deploy.dir" value="${build.classes.dir}/deploy" />
	<property name="build.dir.jdoc" value="${build.classes.dir}/javadoc" />
	<property name="junit.results.dir" value="${build.classes.dir}/junit-reports" />

	<!-- dbxml -->
	<!--property name="dbxml.native.filename" value="dbxml-native" />
	<property name="dbxml.native.lib" value="${lib.dir}/bdbxml/${version.bdbxml}/native/${os.name}/${os.arch}/" />
	<property name="dbxml.native.path" value="${build.classes.dir}/resources/dbxml-native" /-->

	<!-- javac arguments -->
	<property name="javac.debug" value="on" />
	<property name="javac.deprecation" value="off" />
	<property name="javac.optimize" value="on" />
	<property name="javac.depend" value="off" />
	<property name="javac.verbose" value="off" />
	<property name="build.compiler.pedantic" value="no" />

	<!-- java args -->
	<property name="java.heap.init" value="128" />
	<property name="java.heap.max" value="512" />

	<!-- ant contrib task def -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib/${version.ant-contrib}/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- init										 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="init" description="Build if needed other DDI tools jars">
		<echo>${os.name}-${os.arch}-${os.version}</echo>
		<!-- checking for util jar -->
		<if>
			<available file="${lib.dir}/build/org.ddialliance.ddiftp.util/${version.ddiftp.util}/org.ddialliance.ddiftp.util.jar" />
			<then>
				<echo message="DDIFtp-util jar is present" />
			</then>
			<else>
				<echo message="Building DDIFtp-util" />
				<ant inheritall="false" inheritrefs="false" antfile="${basedir}/../util/build.xml" target="jar" />
				<echo message="DDIFtp-util build" />
			</else>
		</if>

		<!-- checking for ddieditor xmlbeans jar -->
		<if>
			<available file="${basedir}/../ddieditor-xmlbeans/xmllib/org.ddialliance.ddieditor.model.xmlbeans.jar" />
			<then>
				<echo message="Ddieditor xmlbeans jar is present" />
			</then>
			<else>
				<echo message="Building ddieditor xmlbeans" />
				<ant inheritall="false" inheritrefs="false" antfile="${basedir}/../ddieditor-xmlbeans/build.xml" target="scomp" />
				<echo message="Ddieditor xmlbeans build" />
			</else>
		</if>

		<!-- project class path -->
		<path id="project.classpath">
			<fileset dir="${lib.dir}">
				<include name="junit/${version.junit}/*.jar" />
				<include name="log4j/${version.log4j}/*.jar" />
				<include name="xmlbeans/${version.xmlbeans}/*.jar" />
				<include name="saxon/${version.saxon}/*jar" />
				<include name="xerecs/${version.xerecs}/*.jar" />
				<include name="xalan/${version.xalan}/*.jar" />
				<include name="bdbxml/${version.bdbxml}/*.jar" />
				<include name="jaxen/${version.jaxen}/*.jar" />
				<include name="jdom/${version.jdom}/*.jar" />
				<include name="picocolo/${version.picocolo}/*.jar" />
				<include name="vtd-xml/${version.vtd-xml}/*.jar" />
				<include name="joda-time/${version.joda-time}/*.jar" />
				<include name="aspectj/${version.aspectj}/*.jar" />
				<include name="commons/jexl/${version.commons.jexl}/*.jar" />
				<include name="perf4j/${version.perf4j}/*.jar" />
				<include name="relaxngDatatype/${version.relaxngDatatype}/*.jar" />
				<include name="xsom/${version.xsom}/*.jar" />
			</fileset>
			<fileset dir="${ddi_3_0-xml-xmlbeans}">
				<include name="*20080428*.jar" />
			</fileset>
			<fileset dir="${lib.dir}/build">
				<include name="org.ddialliance.ddiftp.util/${version.ddiftp.util}/*.jar" />
			</fileset>
			<fileset dir="${basedir}/../ddieditor-xmlbeans/xmllib">
				<include name="*.jar" />
			</fileset>
			<pathelement path="${build.classes.dir}" />
			<pathelement path="${testsrc.dir}" />
			<pathelement location="${src.dir}" />
		</path>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- clean										 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="clean" description="Clean up">
		<delete quiet="true" dir="${build.classes.dir}" />
	</target>

	<target name="clean-global" depends="clean" description="Clean project and the distribution dir in lib-java/build">
		<delete dir="${lib.dir}/build/" />
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- compile			                         -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="compile" depends="init" description="Compile the code">
		<mkdir dir="${build.classes.dir}" />
		<javac destdir="${build.classes.dir}" classpathref="project.classpath" fork="yes" debug="${javac.debug}" deprecation="${javac.deprecation}" optimize="${javac.optimize}">
			<src path="${src.dir}" />
		</javac>
	</target>

	<target name="resource" description="Setup resources in the build dir">
		<copy todir="${build.classes.dir}/resources" overwrite="yes" verbose="true">
			<fileset dir="${src.resources.dir}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${build.classes.dir}/resources" verbose="true">
			<fileset dir="${basedir}/../util/source/resources">
				<include name="*.properties" />
			</fileset>
		</copy>
		<copy todir="${build.classes.dir}/resources" verbose="true">
			<fileset dir="${basedir}/../ddieditor-xmlbeans/source/resources">
				<include name="*.xsd" />
			</fileset>
		</copy>
		<mkdir dir="${build.classes.dir}/logs" />
	</target>

	<target name="jar" depends="compile" description="Generate deploy files for distribution">
		<mkdir dir="${build.deploy.dir}" />
		<tstamp prefix="build_time">
			<format property="TSTAMP" pattern="dd.MM.yyyy HH:mm:ss" />
		</tstamp>

		<!-- jar file -->
		<jar destfile="${build.deploy.dir}/${xmljar.name}">
			<manifest>
				<attribute name="Main-Class" value="org.ddialliance.ddieditor.DdiEditor" />
				<attribute name="Class-Path" value=". lib/log4j/${version.log4j}/log4j-1.2.15.jar lib/saxon/${version.saxon}/saxon9.jar lib/saxon/${version.saxon}/saxon9-dom.jar lib/xmlbeans/${version.xmlbeans}/jsr173_1.0_api.jar lib/xmlbeans/${version.xmlbeans}/resolver.jar lib/xmlbeans/${version.xmlbeans}/xbean.jar lib/xmlbeans/${version.xmlbeans}/xbean_xpath.jar lib/xmlbeans/${version.xmlbeans}/xmlbeans-qname.jar lib/xmlbeans/${version.xmlbeans}/xmlpublic.jar lib/xerecs/${version.xerecs}/xerecsImpl.jar lib/ddi/${ddi.version}/org.ddialliance.ddi_3_0_20080428.xml.xmlbeans.jar lib/org.ddialliance.ddiftp.util/${version.ddiftp.util}/org.ddialliance.ddiftp.util.jar lib/xalan/${version.xalan}/xalan.jar lib/xalan/${version.xalan}/serializer.jar lib/xalan/${version.xalan}/xml-apis.jar lib/xalan/${version.xalan}/xsltc.jar lib/bdbxml/${version.bdbxml}/dbxml.jar lib/bdbxml/${version.bdbxml}/db.jar lib/ddieditor-xmlbeans/org.ddialliance.ddieditor.model.xmlbeans.jar lib/vtd-xml/${version.vtd-xml}/vtd-xml.jar lib/joda-time/${version.joda-time}/joda-time.jar lib/aspectj/${version.aspectj}/aspectjrt.jar lib/aspectj/${version.aspectj}/aspectjweaver.jar lib/commons/jexl/${version.commons.jexl}/commons-jexl.jar lib/perf4j/${version.perf4j}/perf4j.jar lib/relaxngDatatype/${version.relaxngDatatype}/relaxngDatatype.jar lib/xsom/${version.xsom}/xsom.jar lib/xsom/${version.xsom}/xsom14.jar " />
				<section name="Version-Info">
					<attribute name="Version" value="${xmljar.version}" />
					<attribute name="Built-Date" value="${build_time.TSTAMP} (dd.MM.yyyy HH:mm:ss)" />
					<attribute name="Built-By" value="${user.name}" />
				</section>
			</manifest>

			<fileset dir="${build.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/*Test*.class" />
			</fileset>
		</jar>

		<!-- libaries -->
		<mkdir dir="${build.deploy.dir}/lib" />
		<copy todir="${build.deploy.dir}/lib" verbose="true">
			<fileset dir="${lib.dir}">
				<include name="log4j/${version.log4j}/*.jar" />
				<include name="xmlbeans/${version.xmlbeans}/*.jar" />
				<include name="saxon/${version.saxon}/*jar" />
				<include name="xerces/${version.xerecs}/*.jar" />
				<include name="xalan/${version.xalan}/*.jar" />
				<include name="bdbxml/${version.bdbxml}/*.jar" />
				<include name="vtd-xml/${version.vtd-xml}/*.jar" />
				<include name="aspectj/${version.aspectj}/*.jar" />
				<include name="commons/jexl/${version.commons.jexl}/*.jar" />
				<include name="perf4j/${version.perf4j}/*.jar" />
				<include name="relaxngDatatype/${version.relaxngDatatype}/*.jar" />
				<include name="xsom/${version.xsom}/*.jar" />
				<include name="joda-time/${version.joda-time}/*.jar" />
			</fileset>
			<fileset dir="${lib.dir}/build">
				<include name="org.ddialliance.ddiftp.util/${version.ddiftp.util}/*.jar" />
			</fileset>
		</copy>
		<mkdir dir="${build.deploy.dir}/lib/ddi/${ddi.version}" />
		<copy todir="${build.deploy.dir}/lib/ddi/${ddi.version}">
			<fileset dir="${ddi_3_0-xml-xmlbeans}">
				<include name="*20080428*.jar" />
			</fileset>
		</copy>

		<mkdir dir="${build.deploy.dir}/lib/" />
		<copy todir="${build.deploy.dir}/lib/ddieditor-xmlbeans">
			<fileset dir="../ddieditor-xmlbeans/xmllib">
				<include name="*.jar" />
			</fileset>
		</copy>

		<!-- resources -->
		<mkdir dir="${build.deploy.dir}/resources" />
		<copy todir="${build.deploy.dir}/resources">
			<fileset dir="${src.resources.dir}">
				<include name="*.properties" />
				<include name="*.txt" />
			</fileset>
		</copy>
		<copy todir="${build.deploy.dir}/resources">
			<fileset dir="${basedir}/../util/source/resources">
				<include name="util-message.properties" />
			</fileset>
		</copy>
		<copy todir="${build.deploy.dir}/resources">
			<fileset dir="${src.resources.dir}">
				<include name="*.xsd" />
				<include name="*.xml" />
			</fileset>
		</copy>
		<copy todir="${build.deploy.dir}/resources">
			<fileset dir="${basedir}/../ddieditor-xmlbeans/source/resources">
				<include name="*.xsd" />
			</fileset>
		</copy>
		<mkdir dir="${build.deploy.dir}/logs" />

		<!-- javadoc -->
		<antcall target="javadoc" />
		<mkdir dir="${build.deploy.dir}/resources/doc/validation" />
		<copy todir="${build.deploy.dir}/resources/doc/validation">
			<fileset dir="${build.dir.jdoc}" />
		</copy>
	</target>

	<!-- 	Currently not used! 
			TODO look into this
	-->
	<target name="native-dbxml" description="Sets up the native dbxml libs dependend on platform">
		<if>
			<available type="dir" file="${dbxml.native.lib}" />
			<else>
				<echo message="${dbxml.native.lib} no such directory!" />
				<echo message="Native dbxml libraries are not avialable for your architecture contact DDIFTP team for support" />
				<echo message="Or download dbxml from Oracle, http://www.oracle.com" />
			</else>
		</if>
		<pathconvert property="dbxml.native.path">
			<path location="${dbxml.native.path}" />
		</pathconvert>

		<pathconvert property="dbxml.native.lib.test">
			<map from="/" to='\' />
			<path location="${dbxml.native.lib}" />
		</pathconvert>

		<if>
			<available type="dir" file="${dbxml.native.path}" />
			<then>
				<echo message="Native dbxml libraries are present" />
			</then>
			<else>
				<echo message="Extracting native dbxml libraries" />
				<mkdir dir="${dbxml.native.path}" />

				<condition property="current.os" value="unix" else="windows">
					<os family="unix" />
				</condition>
				<if>
					<equals arg1="${current.os}" arg2="unix" />
					<then>
						<echo message="unix ;- )" />
						<gunzip src="${dbxml.native.lib}/${dbxml.native.filename}.tar.gz" dest="${dbxml.native.path}" />
						<exec executable="/bin/tar" dir="${dbxml.native.path}">
							<arg line="-xf ${dbxml.native.path}/${dbxml.native.filename}.tar " />
						</exec>
					</then>
					<else>
						<echo message="windows !- |" />
						<gunzip src="${dbxml.native.lib.test}/${dbxml.native.filename}.tar.gz" dest="${dbxml.native.path}" />
						<untar src="${dbxml.native.lib.test}/${dbxml.native.filename}.tar" dest="${dbxml.native.path}" />
					</else>
				</if>
				<delete file="${dbxml.native.path}/${dbxml.native.filename}.tar" quiet="true" />
			</else>
		</if>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- junit test									 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="compile-test" depends="compile, resource" description="Compiles all test code">
		<javac destdir="${build.classes.dir}" classpathref="project.classpath" fork="yes" debug="${javac.debug}" deprecation="${javac.deprecation}" optimize="${javac.optimize}">
			<src path="${testsrc.dir}" />
		</javac>
	</target>

	<target name="test" depends="compile-test, resource" description="Runs all junit tests">
		<mkdir dir="${junit.results.dir}" />

		<delete quiet="true">
			<fileset dir="${junit.results.dir}">
				<include name="*.xml" />
			</fileset>
		</delete>

		<!-- run tests forkmode="perTest" -->
		<junit fork="yes" printsummary="yes" haltonfailure="false" dir="${build.classes.dir}">
			<classpath refid="project.classpath" />
			<jvmarg value="-Xms${java.heap.init}m" />
			<jvmarg value="-Xmx${java.heap.max}m" />
			<jvmarg value="-Djava.library.path=${dbxml.native.path}" />
			<jvmarg value="-Dddiftp.config=org.ddialliance.ddieditor.util" />
			<jvmarg value="-Dddieditor.test=true" />
			<batchtest todir="${junit.results.dir}">
				<fileset dir="${testsrc.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/*.class" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
		</junit>
	</target>

	<target name="test-report" depends="test" description="Generates JUnit test reports">
		<junitreport todir="${junit.results.dir}">
			<fileset dir="${junit.results.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.results.dir}" />
		</junitreport>
	</target>

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- misc										 -->
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<target name="javadoc" description="Compile javadoc">
		<mkdir dir="${build.dir.jdoc}" />
		<javadoc sourcepath="${src.dir}" destdir="${build.dir.jdoc}" classpathref="project.classpath" splitindex="true" verbose="true">
			<fileset dir="${src.dir}">
				<include name="org/ddiallince/**/*" />
			</fileset>
		</javadoc>
	</target>
</project>
